
@using Betfair.ExchangeComparison.Domain.Extensions;
@model Betfair.ExchangeComparison.Pages.Models.CatalogViewModel;
@*@if (!string.IsNullOrEmpty(Model.Message))
    {
        <script>$(function () {
                $("#flash-message").flashMessage("Request to load Meeting Catalog Failed. Please contact support.");
            });</script>
    }*@

<div class="row" style="min-height:100vh">
    <div class="col-md-5 offset-md-1 m-1 p-3">
        <div class="text-light p-1">Best Win</div>
        <div class="row">
            @{
                var bestWinRunnersByEvent = Model.BestWinRunners.OrderBy(m => m.Event.Name).GroupBy(m => m.Event.Name);
                var winSplitGroups = bestWinRunnersByEvent.Select((x, i) => new { Index = i, Value = x })
                    .GroupBy(x => x.Index / 3)
                    .Select(x => x.Select(v => v.Value).ToList())
                    .ToList();
                ViewData["WinOrEachWay"] = "Win";
            }
            <div class="col-md-6">
                @if (winSplitGroups.Count() > 0)
                {
                    @foreach (var bestRunnerGrouped in winSplitGroups[0])
                    {
                        @await Html.PartialAsync("./RacingMeetingBestRunnerCardPartial.cshtml", bestRunnerGrouped, ViewData)
                    }
                }
            </div>
            <div class="col-md-6">
                @if (winSplitGroups.Count() > 1)
                {
                    @foreach (var bestRunnerGrouped in winSplitGroups[1])
                    {
                        @await Html.PartialAsync("./RacingMeetingBestRunnerCardPartial.cshtml", bestRunnerGrouped, ViewData)
                    }
                }
            </div>
        </div>
    </div>
    <div class="col-md-5 offset-md-1 m-1 p-3">
        <div class="text-light p-1">Best Each Way</div>
        <div class="row">
            @{
                var bestEachWayRunnersByEvent = Model.BestEachWayRunners.OrderBy(m => m.Event.Name).GroupBy(m => m.Event.Name);
                var ewSplitGroups = bestEachWayRunnersByEvent.Select((x, i) => new { Index = i, Value = x })
                    .GroupBy(x => x.Index / 3)
                    .Select(x => x.Select(v => v.Value).ToList())
                    .ToList();
                ViewData["WinOrEachWay"] = "EachWay";
            }
            <div class="col-md-6">
                @if (ewSplitGroups.Count() > 0)
                {
                    @foreach (var bestRunnerGrouped in ewSplitGroups[0])
                    {
                        @await Html.PartialAsync("./RacingMeetingBestRunnerCardPartial.cshtml", bestRunnerGrouped, ViewData)
                    }
                }

            </div>
            <div class="col-md-6">
                @if (ewSplitGroups.Count() > 1)
                {
                    @foreach (var bestRunnerGrouped in ewSplitGroups[1])
                    {
                        @await Html.PartialAsync("./RacingMeetingBestRunnerCardPartial.cshtml", bestRunnerGrouped, ViewData)
                    }
                }
            </div>
        </div>
    </div>
</div>

<div>
    @if (Model.UsageModel.ApiCreditUsage > 0)
    {
        <span class="text-light">Api Usage: @Model.UsageModel.ApiCreditUsage</span>
    }
</div>

<div class="row">
    @foreach (var meetingKvp in @Model.Markets.GroupBy(r => r.Parent).OrderBy(v => v.Key.OpenDate))
    {
        ViewData["MeetingName"] = meetingKvp.Key.Name;
        var date = meetingKvp.FirstOrDefault()?.SportsbookMarket.marketStartTime.Date ?? new DateTime();
        <div class="col-md-4 m-1 p-1">
            <h6 class="m-2">@meetingKvp.Key.Name @date.ToLongDateString()</h6>
            @foreach (var @race in meetingKvp.OrderBy(r => r.SportsbookMarket.marketStartTime))
            {
                @await Html.PartialAsync("./MarketPartial.cshtml", @race, ViewData)
            }
        </div>
    }
</div>
