
@using Betfair.ExchangeComparison.Domain.Extensions;
@using Betfair.ExchangeComparison.Domain.Matchbook;
@using Betfair.ExchangeComparison;
@model Betfair.ExchangeComparison.Pages.Racing.IndexModel

<div class="row">
    <div class="col-12" id="racing-catalog">
        <span id="last-updated-time" class="text-light pl-3">Last Updated - @DateTime.UtcNow.ConvertUtcToBritishIrishLocalTime().ToString("HH:mm:ss")</span>
        <div class="row" style="min-height:100vh">
            <div class="col-md-5 offset-md-1 m-1 p-3">
                <div class="text-light p-1">Best Win</div>
                <div class="row">
                    @{
                        var bestWinRunnersByEvent = Model.CatalogViewModel.BestWinRunners.OrderBy(m => m.Event.Name).GroupBy(m => m.Event.Name);
                        var winSplitGroups = bestWinRunnersByEvent.Select((x, i) => new { Index = i, Value = x })
                            .GroupBy(x => x.Index / 3)
                            .Select(x => x.Select(v => v.Value).ToList())
                            .ToList();
                        ViewData["WinOrEachWay"] = "Win";
                    }
                    <div class="col-md-6 meeting-card">
                        @if (winSplitGroups.Count() > 0)
                        {
                            @foreach (var bestRunnerGrouped in winSplitGroups[0])
                            {
                                @await Html.PartialAsync("./RacingMeetingBestRunnerCardPartial.cshtml", bestRunnerGrouped, ViewData)
                            }
                        }
                    </div>
                    <div class="col-md-6 meeting-card">
                        @if (winSplitGroups.Count() > 1)
                        {
                            @foreach (var bestRunnerGrouped in winSplitGroups[1])
                            {
                                @await Html.PartialAsync("./RacingMeetingBestRunnerCardPartial.cshtml", bestRunnerGrouped, ViewData)
                            }
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6 offset-md-1 m-1 p-3 text-sm">
                <div class="text-light p-1">Matchbook Orders</div>
                @foreach (var raceWithOffers in Model.CatalogViewModel.CurrentOffers.OrderByDescending(x => x.Key.TimeToStart))
                {
                    @if (!raceWithOffers.Value.Any() || raceWithOffers.Value.SelectMany(x => x.MatchedBets).Count() == 0) continue;
                    <div class="m-2 p-2 bg-info text-dark border border-dark rounded">
                        <h6>@raceWithOffers.Key.Parent.Venue @raceWithOffers.Key.SportsbookMarket.marketStartTime.ConvertUtcToBritishIrishLocalTime().ToString("HH:mm")</h6>
                        @{
                            var offersByRunner = raceWithOffers.Value
                                .Where(o => o.Status == "matched" || o.Status == "open")
                                                        .GroupBy(o => o.RunnerName);

                            var grouped = offersByRunner.Select(x => new Offer
                            {
                                RunnerName = x.Key,
                                Stake = x.Sum(v => (v.Stake - v.Remaining)),
                                Odds = x.Aggregate(new Double(), (c, n) => c + ((n.Stake - n.Remaining) * (n.Odds))) / x.Sum(v => (v.Stake - v.Remaining)),
                                Status = "matched",
                                Side = "back",
                                EventId = x.First().EventId
                            });

                            double stakedEv = 0;
                        }
                        @foreach (var offer in grouped
                            .OrderBy(s => s.Odds)
                            .ThenBy(s => s.RunnerName)
                            .ThenBy(s => s.Status))
                        {
                            var textColor = offer.Status.ToUpper() == "OPEN" ? "text-magenta" : "text-dark";
                            var currentPrice = @offer.GetCurrentPrice(Model.CatalogViewModel);
                            var currentExpectedValue = currentPrice > 0 ? offer.Odds.ExpectedValue(currentPrice) : 0;
                            var currentStakedExpectedValue = currentExpectedValue * offer.Stake;
                            var latestWap = @offer.LatestWeightedAveragePrice(Model.CatalogViewModel);

                            stakedEv += currentStakedExpectedValue;
                            if (offer.Stake == 0) continue;
                            <div class="bg-light @textColor m-1 p-1 border border-dark rounded">
                                <span><strong>@offer.RunnerName.CleanRunnerName()</strong> &nbsp;</span>
                                <span>€@offer.Stake.ToString("0.00") at </span>
                                <span>@offer.Odds.ToString("0.00")</span>
                                <span>--> @currentPrice.ToString("0.00")</span>
                                @if (@offer.Status == "matched")
                                {
                                    var c = currentExpectedValue >= 0 ? "text-success" : "text-danger";
                                    <span class="@c"><i>[@currentExpectedValue.ToString("0.000")]</i></span>
                                }
                                &nbsp
                                <span>wap=@latestWap.ToString("0.00")</span>
                            </div>
                        }
                        @{
                            var evColor = stakedEv >= 0 ? "bg-success" : "bg-danger";
                            <div class="ms-1 mt-3">
                                <span class="ps-2 pe-2 pt-1 pb-1 @evColor text-light border border-dark rounded"><small>€@stakedEv.ToString("0.00")</small></span>
                            </div>
                        }

                    </div>
                }
            </div>
            <div class="col-md-5 offset-md-1 m-1 p-3">
                @{
                    var bestWapsAbove = Model.CatalogViewModel.Markets
                    .SelectMany(m => m.Runners)
                    .Where(r => r.ExcDifferenceToWeightedAveragePrice != 0)
                    .OrderByDescending(r => r.ExcDifferenceToWeightedAveragePrice)
                    .Take(10)
                    .OrderBy(w => w.ParentMarket.marketStartTime);
                 }
                <div class="text-light p-1">Best Waps</div>

                    @foreach (var runner in @bestWapsAbove)
                    {
                    var bgColor = @runner.ExcDifferenceToWeightedAveragePrice >= 0.05 ? "bg-primary" : "bg-secondary";
                        var bestAvailable = @runner.ExchangeWinRunner?.BestAvailable()?.ContainsKey(Exchange.Model.Side.BACK) != null ?
                            @runner.ExchangeWinRunner.BestAvailable()[Exchange.Model.Side.BACK].Price.ToString("0.00") : "0";
                    var diffText = @runner.ExcDifferenceToWeightedAveragePrice >= 0.05 ? "text-lime" : "text-info";
                    <div class="m-2 p-2 @bgColor text-dark border border-dark rounded">
                        <span class="text-light">@runner.MappedEventName </span> &nbsp
                        <span><strong>@runner.SportsbookRunner.selectionName</strong> </span> &nbsp
                        <span class="text-lime">@bestAvailable </span> -
                        <span> <span class="text-warning">@runner.WeightedAveragePrice.ToString("0.00") </span> </span>
                        <span class="@diffText"><i>[@runner.ExcDifferenceToWeightedAveragePrice.ToString("0.000")]</i> </span>
                        <span class="text-dark"><small>@runner.TotalRunnerVolume.ToString("0")</small> </span>
                        </div>
                    }
                
            </div>
            <div class="col-md-5 offset-md-1 m-1 p-3">
                @{
                    var bestWapsBelow = Model.CatalogViewModel.Markets
                    .SelectMany(m => m.Runners)
                    .Where(r => r.ExcDifferenceToWeightedAveragePrice != 0)
                    .OrderBy(r => r.ExcDifferenceToWeightedAveragePrice)
                    .Take(10)
                    .OrderBy(w => w.ParentMarket.marketStartTime);
                }
                <div class="text-light p-1">Lowest Waps</div>

                @foreach (var runner in @bestWapsBelow)
                {
                    var bgColor = @runner.ExcDifferenceToWeightedAveragePrice <= -0.05 ? "bg-primary" : "bg-secondary";
                    var bestAvailable = @runner.ExchangeWinRunner?.BestAvailable()?.ContainsKey(Exchange.Model.Side.BACK) != null ? 
                        @runner.ExchangeWinRunner.BestAvailable()[Exchange.Model.Side.BACK].Price.ToString("0.00") : "0";
                    var diffText = @runner.ExcDifferenceToWeightedAveragePrice <= -0.05 ? "text-lime" : "text-info";
                    <div class="m-2 p-2 @bgColor text-dark border border-dark rounded">
                        <span class="text-light">@runner.MappedEventName </span> &nbsp
                        <span><strong>@runner.SportsbookRunner.selectionName</strong> </span> &nbsp
                        <span class="text-lime">@bestAvailable </span> -
                        <span> <span class="text-warning">@runner.WeightedAveragePrice.ToString("0.00") </span> </span>
                        <span class="@diffText"><i>[@runner.ExcDifferenceToWeightedAveragePrice.ToString("0.000")]</i> </span>
                        <span class="text-dark"><small>@runner.TotalRunnerVolume.ToString("0")</small> </span>
                    </div>
                }

            </div>
            <div class="col-md-5 offset-md-1 m-1 p-3">
                <div class="text-light p-1">Best Each Way</div>
                <div class="row">
                    @{
                        var bestEachWayRunnersByEvent = Model.CatalogViewModel.BestEachWayRunners.OrderBy(m => m.Event.Name).GroupBy(m => m.Event.Name);
                        var ewSplitGroups = bestEachWayRunnersByEvent.Select((x, i) => new { Index = i, Value = x })
                            .GroupBy(x => x.Index / 3)
                            .Select(x => x.Select(v => v.Value).ToList())
                            .ToList();
                        ViewData["WinOrEachWay"] = "EachWay";
                    }
                    <div class="col-md-6 meeting-card">
                        @if (ewSplitGroups.Count() > 0)
                        {
                            @foreach (var bestRunnerGrouped in ewSplitGroups[0])
                            {
                                @await Html.PartialAsync("./RacingMeetingBestRunnerCardPartial.cshtml", bestRunnerGrouped, ViewData)
                            }
                        }

                    </div>
                    <div class="col-md-6 meeting-card">
                        @if (ewSplitGroups.Count() > 1)
                        {
                            @foreach (var bestRunnerGrouped in ewSplitGroups[1])
                            {
                                @await Html.PartialAsync("./RacingMeetingBestRunnerCardPartial.cshtml", bestRunnerGrouped, ViewData)
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
        <div>
            @if (Model.CatalogViewModel.UsageModel.ApiCreditUsage > 0)
            {
                <span class="text-light">Api Usage: @Model.CatalogViewModel.UsageModel.ApiCreditUsage</span>
            }
        </div>

        <div class="row">
            @foreach (var meetingKvp in @Model.CatalogViewModel.Markets.GroupBy(r => r.Parent).OrderBy(v => v.Key.OpenDate))
            {
                ViewData["MeetingName"] = meetingKvp.Key.Name;
                var date = meetingKvp.FirstOrDefault()?.SportsbookMarket.marketStartTime.Date ?? new DateTime();
                <div class="col-md-4 m-1 p-1">
                    <h6 class="m-2">@meetingKvp.Key.Name @date.ToLongDateString()</h6>
                    @foreach (var @race in meetingKvp.OrderBy(r => r.SportsbookMarket.marketStartTime))
                    {
                        @await Html.PartialAsync("./RacingMarketPartial.cshtml", @race, ViewData)
                    }
                </div>
            }
        </div>
    </div>
</div>

<script>$(document).ready(function () {
        $(".meeting-card").fadeOut(100).fadeIn(100).fadeOut(100).fadeIn(100);
    });</script>
